#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>

#define BUFFER_SIZE 20

// Δομή για τα προϊόντα
typedef struct {
    char name[BUFFER_SIZE];
    int price;
    int stock;
} Product;

// Λίστα προϊόντων
Product products[] = {
    {"Product1", 10, 5},
    {"Product2", 20, 3},
    {"Product3", 15, 2}
};
int num_products = sizeof(products) / sizeof(products[0]);
void handle_order(int client_to_server[2], int server_to_client[2]) {
    char buffer[BUFFER_SIZE];
    close(client_to_server[1]); // Κλείνουμε την εγγραφή από τον πελάτη
    close(server_to_client[0]); // Κλείνουμε την ανάγνωση από τον πελάτη

    // Ανάγνωση παραγγελίας από τον πελάτη
    read(client_to_server[0], buffer, BUFFER_SIZE);
    printf("Server received order: %s\n", buffer);

    // Επεξεργασία παραγγελίας
    int success = 0, total_cost = 0;
    char response[BUFFER_SIZE] = "";

    for (int i = 0; i < num_products; i++) {
        if (strncmp(buffer, products[i].name, BUFFER_SIZE) == 0) {
            if (products[i].stock > 0) {
                products[i].stock--;
                total_cost = products[i].price;
success = 1;
                snprintf(response, BUFFER_SIZE, "Order successful: %s, Cost: %d\n", products[i].name, total_cost);
            } else {
                snprintf(response, BUFFER_SIZE, "Order failed: %s out of stock\n", products[i].name);
            }
            break;
        }
    }

    if (!success && strlen(response) == 0) {
        snprintf(response, BUFFER_SIZE, "Order failed: Product not found\n");
    }

    // Αποστολή απάντησης στον πελάτη
    write(server_to_client[1], response, strlen(response) + 1);
    close(client_to_server[0]);
    close(server_to_client[1]);
}

void client_process(int client_to_server[2], int server_to_client[2], const char *order) {
    char buffer[BUFFER_SIZE];
    close(client_to_server[0]); // Κλείνουμε την ανάγνωση από τον server
    close(server_to_client[1]); // Κλείνουμε την εγγραφή στον server

    // Αποστολή παραγγελίας
    write(client_to_server[1], order, strlen(order) + 1);
    printf("Client sent order: %s\n", order);

    // Λήψη απάντησης
    read(server_to_client[0], buffer, BUFFER_SIZE);
    printf("Client received: %s\n", buffer);

    close(client_to_server[1]);
    close(server_to_client[0]);
}

int main() {
    int client_to_server[2], server_to_client[2];

    // Δημιουργία pipes
    if (pipe(client_to_server) == -1 || pipe(server_to_client) == -1) {
        perror("Pipe failed");
        exit(1);
    }

    // Δημιουργία child process
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // Server process
        handle_order(client_to_server, server_to_client);
    } else {
        // Client process
        const char *orders[] = {"Product1", "Product2", "Product3", "Product1", "Product4"};
        for (int i = 0; i < 5; i++) {
            client_process(client_to_server, server_to_client, orders[i]);
            sleep(1); // Καθυστέρηση για να προσομοιωθεί η επικοινωνία
        }
        wait(NULL); // Αναμονή για τον server
    }

    return 0;
}
